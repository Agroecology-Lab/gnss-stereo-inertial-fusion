%YAML:1.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------
Camera.type: "PinHole"

# Camera calibration and distortion parameters (OpenCV) (equal for both cameras after stereo rectification)
Camera.fx: 706.7532243984474
Camera.fy: 706.7532243984474
Camera.cx: 647.1927871704102
Camera.cy: 378.57954025268555

Camera.k1: 0.0
Camera.k2: 0.0
Camera.p1: 0.0
Camera.p2: 0.0

Camera.width: 1280
Camera.height: 720

# Camera frames per second 
Camera.fps: 15

# stereo baseline times fx
Camera.bf: 83.91450569403555

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 1

loopClosing: 0

# Close/Far threshold. Baseline times.
ThDepth: 10000000.0 # 35

# Transformation from camera 0 to body-frame (imu)
# To obtain this tf, just play the bagfile and execute: rosrun tf2_tools echo.py imu left -p 10
# It is the inverse of the T_cam_imu matrix obtained from Kalibr.
Tbc: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   data: [-0.01152904, -0.91297258, -0.40785801, -0.04958088,
          -0.99947839,  0.02282702, -0.02284474,  0.0635034 ,
           0.0301668 ,  0.40738189, -0.91275953, -0.13499348,
           0.0,  0.0,  0.0,  1.0]

System.UseGlobalMeas: 1
System.GPSSimulatedNoise: 0.0
System.t_b_g: !!opencv-matrix
   rows: 3
   cols: 1
   dt: f
   data: [0.29250, 
          0.00500, 
         -0.06250]

# IMU noise
IMU.NoiseGyro: 0.011292103054687074 #0.00011292103054687074
IMU.NoiseAcc: 0.19366268769180487 #0.0019366268769180487
IMU.GyroWalk: 3.6132794408280443e-03 #3.6132794408280443e-06
IMU.AccWalk: 0.020702566216083702 #0.00020702566216083702
IMU.Frequency: 200

#--------------------------------------------------------------------------------------------
# Stereo Rectification. Only if you need to pre-rectify the images.
# Camera.fx, .fy, etc must be the same as in LEFT.P
#--------------------------------------------------------------------------------------------
LEFT.height: 720
LEFT.width: 1280
LEFT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data: [-0.17540762600530788, 0.02772609805785333, -4.570245390723284e-05, 0.00046180492225638407, 0.0]
LEFT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [703.1963636890865, 0.0, 659.6917396760323, 0.0, 699.2677568052012, 355.3797351101192, 0.0, 0.0, 1.0]
LEFT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9997641067780744, 0.0009329566057495969, 0.021699317736070194, -0.0008964823349763293, 0.9999981691585031, -0.0016905617600603987, -0.021700855228820308, 0.0016707099129685296, 0.9997631127475771]
LEFT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [706.7532243984474, 0.0, 647.1927871704102, 0.0, 0.0, 706.7532243984474, 378.57954025268555, 0.0, 0.0, 0.0, 1.0, 0.0]

RIGHT.height: 720
RIGHT.width: 1280
RIGHT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data: [-0.17513968781730366, 0.028066914397515363, 2.5541583524947588e-05, 0.0004652324141771729, 0.0]
RIGHT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [704.6305927247298, 0.0, 649.1471715865125, 0.0, 700.7489249230098, 390.0388987995343, 0.0, 0.0, 1.0]
RIGHT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9999893458416482, -0.0001509202898354299, 0.004613613145753219, 0.00014316579511841949, 0.9999985767531095, 0.001681069692278745, -0.004613860286967846, -0.0016803912703016613, 0.9999879442165446]
RIGHT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [706.7532243984474, 0.0, 647.1927871704102, -83.91450569403555, 0.0, 706.7532243984474, 378.57954025268555, 0.0, 0.0, 0.0, 1.0, 0.0]

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1800

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3
Viewer.ViewpointX: 0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 500

